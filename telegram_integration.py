"""
–ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Telegram Bot API
–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–∏–Ω –≤ Telegram
"""

import os
import requests
import logging
from typing import List, Optional
from rss_parser import NewsArticle

logger = logging.getLogger(__name__)


class TelegramBot:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API"""
    
    def __init__(self, bot_token: str, chat_id: str):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def send_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É (Markdown –∞–±–æ HTML)
            
        Returns:
            True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        url = f"{self.base_url}/sendMessage"
        
        data = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_web_page_preview": False
        }
        
        try:
            response = requests.post(url, json=data, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {result.get('description')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ Telegram: {e}")
            return False
    
    def send_article(self, article: NewsArticle) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç—Ç—é –≤ Telegram
        
        Args:
            article: –û–±'—î–∫—Ç —Å—Ç–∞—Ç—Ç—ñ
            
        Returns:
            True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        if article.telegram_post:
            return self.send_message(article.telegram_post)
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î –≥–æ—Ç–æ–≤–æ–≥–æ Telegram-–ø–æ—Å—Ç—É
            message = f"""üì¢ *{article.translated_title or article.title}*

{article.summary or article.description}

[–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é]({article.link})

–î–∂–µ—Ä–µ–ª–æ: {article.source}"""
            
            return self.send_message(message)
    
    def send_articles_batch(self, articles: List[NewsArticle], 
                          max_articles: int = 5) -> int:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫—ñ–ª—å–∫–∞ —Å—Ç–∞—Ç–µ–π –≤ Telegram
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
            max_articles: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
        """
        sent_count = 0
        
        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π
        articles_to_send = articles[:max_articles]
        
        if len(articles_to_send) > 1:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è–∫—â–æ –∫—ñ–ª—å–∫–∞ —Å—Ç–∞—Ç–µ–π
            header = f"üá∫üá¶ *–ù–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É* ({len(articles_to_send)} —Å—Ç–∞—Ç–µ–π)"
            self.send_message(header)
        
        for i, article in enumerate(articles_to_send, 1):
            try:
                if self.send_article(article):
                    sent_count += 1
                    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—Ç—é {i}/{len(articles_to_send)}: {article.title}")
                else:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é: {article.title}")
                    
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                import time
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–∞—Ç—Ç—ñ {article.title}: {e}")
        
        return sent_count
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram Bot API
        
        Returns:
            True —è–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î
        """
        url = f"{self.base_url}/getMe"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                bot_info = result.get("result", {})
                logger.info(f"Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.get('username')}")
                return True
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {result.get('description')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram: {e}")
            return False


def send_news_to_telegram(articles: List[NewsArticle], 
                         bot_token: Optional[str] = None,
                         chat_id: Optional[str] = None) -> bool:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–æ–≤–∏–Ω–∏ –≤ Telegram
    
    Args:
        articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—è–∫—â–æ None, –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞)
        chat_id: ID —á–∞—Ç—É (—è–∫—â–æ None, –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞)
        
    Returns:
        True —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Å—Ç–∞—Ç—Ç—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ
    if not bot_token:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not chat_id:
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        logger.warning("Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ (–Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–±–æ chat_id)")
        return False
    
    if not articles:
        logger.info("–ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        return False
    
    try:
        bot = TelegramBot(bot_token, chat_id)
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not bot.test_connection():
            return False
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—Ç—ñ
        sent_count = bot.send_articles_batch(articles)
        
        if sent_count > 0:
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å—Ç–∞—Ç–µ–π –≤ Telegram")
            return True
        else:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∂–æ–¥–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ –≤ Telegram")
            return False
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ Telegram: {e}")
        return False


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if bot_token and chat_id:
        bot = TelegramBot(bot_token, chat_id)
        
        # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        if bot.test_connection():
            # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            test_message = "üß™ –¢–µ—Å—Ç Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ø–∞—Ä—Å–µ—Ä–∞ —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏—Ö –Ω–æ–≤–∏–Ω"
            bot.send_message(test_message)
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram")
    else:
        print("‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–π—Ç–µ TELEGRAM_BOT_TOKEN —Ç–∞ TELEGRAM_CHAT_ID –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
