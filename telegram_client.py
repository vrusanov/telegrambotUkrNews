"""Telegram –∫–ª—ñ—î–Ω—Ç –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""

import logging
from typing import Optional, List
import json
import os
from datetime import datetime
import requests

logger = logging.getLogger(__name__)


class TelegramClient:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API"""

    def __init__(self, token: str, channel_id: str):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –∫–ª—ñ—î–Ω—Ç–∞

        Args:
            token: Telegram Bot Token
            channel_id: ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
        """
        self.token = token
        self.channel_id = channel_id
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.seen_file = "data/seen.json"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –¥–∞–Ω–∏—Ö
        os.makedirs("data", exist_ok=True)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö URL
        self.seen_urls = self._load_seen_urls()
    
    def _load_seen_urls(self) -> set:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö URL"""
        try:
            if os.path.exists(self.seen_file):
                with open(self.seen_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return set(data.get('urls', []))
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ seen.json: {e}")
        
        return set()
    
    def _save_seen_urls(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö URL"""
        try:
            data = {
                'urls': list(self.seen_urls),
                'last_updated': datetime.now().isoformat()
            }
            with open(self.seen_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ seen.json: {e}")
    
    def _escape_markdown_v2(self, text: str) -> str:
        """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown V2"""
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –≤ Markdown V2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def _format_message(self, title: str, summary: str, full_text: str, url: str, source: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Markdown V2
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            summary: –°–∏–Ω–æ–ø—Å–∏—Å
            full_text: –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            url: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            source: –î–∂–µ—Ä–µ–ª–æ
            
        Returns:
            –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        title_escaped = self._escape_markdown_v2(title)
        summary_escaped = self._escape_markdown_v2(summary)
        source_escaped = self._escape_markdown_v2(source)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = f"üì¢ *{title_escaped}*\n\n"
        
        if summary:
            message += f"{summary_escaped}\n\n"
        
        if full_text and len(full_text) > len(summary or ""):
            message += "\\-\\-\\-\n*–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:*\n"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
            if len(full_text) > 1000:
                full_text_short = full_text[:997] + "..."
            else:
                full_text_short = full_text
            
            full_text_escaped = self._escape_markdown_v2(full_text_short)
            message += f"{full_text_escaped}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        message += f"[–ß–∏—Ç–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª]({url})\n\n"
        message += f"–î–∂–µ—Ä–µ–ª–æ: {source_escaped}"
        
        return message
    
    def is_url_seen(self, url: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –±—É–ª–∞ —Å—Ç–∞—Ç—Ç—è –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞"""
        return url in self.seen_urls
    
    def mark_url_as_seen(self, url: str):
        """–ü–æ–∑–Ω–∞—á–∞—î URL —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π"""
        self.seen_urls.add(url)
        self._save_seen_urls()
    
    def _send_telegram_request(self, method: str, data: dict) -> dict:
        """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ Telegram API"""
        try:
            url = f"{self.base_url}/{method}"
            response = requests.post(url, json=data, timeout=30)
            return response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e}")
            return {"ok": False, "description": str(e)}

    def send_message_sync(self, title: str, summary: str, full_text: str,
                         url: str, source: str) -> Optional[int]:
        """
        –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            summary: –°–∏–Ω–æ–ø—Å–∏—Å
            full_text: –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            url: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            source: –î–∂–µ—Ä–µ–ª–æ

        Returns:
            ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –¥—É–±–ª—é—î–º–æ
        if self.is_url_seen(url):
            logger.info(f"URL –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π: {url}")
            return None

        try:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = self._format_message(title, summary, full_text, url, source)

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            data = {
                "chat_id": self.channel_id,
                "text": message,
                "parse_mode": "MarkdownV2",
                "disable_web_page_preview": False
            }

            result = self._send_telegram_request("sendMessage", data)

            if result.get("ok"):
                message_id = result["result"]["message_id"]
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π
                self.mark_url_as_seen(url)
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ID {message_id}")
                return message_id
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {result.get('description')}")
                return None

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return None
    
    def send_message(self, title: str, summary: str, full_text: str,
                    url: str, source: str) -> Optional[int]:
        """
        –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            summary: –°–∏–Ω–æ–ø—Å–∏—Å
            full_text: –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            url: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            source: –î–∂–µ—Ä–µ–ª–æ

        Returns:
            ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        return self.send_message_sync(title, summary, full_text, url, source)
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram"""
        try:
            result = self._send_telegram_request("getMe", {})
            if result.get("ok"):
                username = result["result"].get("username", "unknown")
                logger.info(f"Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{username}")
                return True
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram: {result.get('description')}")
                return False
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            return False
    
    def send_multiple_messages(self, articles_data: List[dict]) -> List[Optional[int]]:
        """
        –ù–∞–¥—Å–∏–ª–∞—î –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        
        Args:
            articles_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ —Å—Ç–∞—Ç–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        """
        message_ids = []
        
        for article_data in articles_data:
            try:
                message_id = self.send_message(
                    title=article_data.get('title', ''),
                    summary=article_data.get('summary', ''),
                    full_text=article_data.get('full_text', ''),
                    url=article_data.get('url', ''),
                    source=article_data.get('source', '')
                )
                message_ids.append(message_id)
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                import time
                time.sleep(2)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ: {e}")
                message_ids.append(None)
        
        return message_ids


def main():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram –∫–ª—ñ—î–Ω—Ç–∞"""
    import os
    
    token = os.getenv('TELEGRAM_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL')
    
    if not token or not channel_id:
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_TOKEN —Ç–∞ TELEGRAM_CHANNEL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        return
    
    client = TelegramClient(token, channel_id)
    
    # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
    if client.test_connection():
        print("‚úÖ Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        test_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É',
            'summary': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ Telegram –±–æ—Ç–∞.',
            'full_text': '–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ–¥—ñ—é.',
            'url': 'https://example.com/test-article',
            'source': 'test'
        }
        
        message_id = client.send_message(**test_data)
        if message_id:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ID {message_id}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram")


if __name__ == "__main__":
    main()
