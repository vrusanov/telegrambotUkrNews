"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª MVP telegram-news-ua-ch
–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –∑ —É—Å—ñ–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º –∑–≥—ñ–¥–Ω–æ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏
"""

import os
import logging
from datetime import datetime
from typing import List

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from parser import NewsParser, Article
from translate import Translator
from summary import Summarizer
from telegram_client import TelegramClient

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π (–ª–µ–≥–∫–æ –≤–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏)
# –î–ª—è –≤–≤—ñ–º–∫–Ω–µ–Ω–Ω—è OpenAI —Ñ—É–Ω–∫—Ü—ñ–π:
# 1. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å OpenAI –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π API –∫–ª—é—á
# 2. –û–Ω–æ–≤—ñ—Ç—å OPENAI_API_KEY –≤ GitHub Secrets
# 3. –ó–º—ñ–Ω—ñ—Ç—å False –Ω–∞ True –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
USE_GPT_CLASSIFICATION = False  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –∫–æ–ª–∏ —î OpenAI –∫–≤–æ—Ç–∞
USE_TRANSLATION = False         # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
USE_SUMMARIZATION = False       # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–Ω–æ–ø—Å–∏—Å—É


def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
    os.makedirs("logs", exist_ok=True)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/app.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )


def load_environment_variables() -> dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    config = {
        'openai_api_key': os.getenv('OPENAI_API_KEY'),
        'telegram_token': os.getenv('TELEGRAM_TOKEN'),
        'telegram_channel': os.getenv('TELEGRAM_CHANNEL')
    }
    
    missing_vars = [key for key, value in config.items() if not value]
    if missing_vars:
        raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {missing_vars}")
    
    return config


def process_article(article: Article, translator: Translator, 
                   summarizer: Summarizer) -> dict:
    """
    –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω—É —Å—Ç–∞—Ç—Ç—é: –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è ‚Üí –ø–µ—Ä–µ–∫–ª–∞–¥ ‚Üí —Ä–µ–∑—é–º–µ
    
    Args:
        article: –°—Ç–∞—Ç—Ç—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        translator: –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á
        summarizer: –†–µ–∑—é–º–∞—Ç–æ—Ä
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    """
    logger = logging.getLogger(__name__)
    
    logger.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞—Ç—Ç—é: {article.title}")
    
    # –ö—Ä–æ–∫ 1: –î–æ–¥–∞—Ç–∫–æ–≤–∞ GPT –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è (—è–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if USE_GPT_CLASSIFICATION:
        text_for_classification = f"{article.title}\n{article.description}"
        if article.full_text:
            text_for_classification += f"\n{article.full_text[:500]}"

        classification = translator.classify_ukraine_related(text_for_classification)

        if classification != "Ukraine-related":
            logger.info(f"–°—Ç–∞—Ç—Ç—è –Ω–µ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É –∑–∞ GPT –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é: {article.title}")
            return None

        logger.info(f"‚úÖ GPT –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤: —Å—Ç–∞—Ç—Ç—è –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É - {article.title}")
    else:
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ GPT –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é (–≤–∏–º–∫–Ω–µ–Ω–æ) –¥–ª—è: {article.title}")
    
    # –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (—è–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if USE_TRANSLATION:
        logger.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑ –º–æ–≤–∏: {article.language}")

        title_ua = translator.translate_to_ukrainian(article.title, article.language)
        description_ua = translator.translate_to_ukrainian(article.description, article.language)

        full_text_ua = None
        if article.full_text:
            full_text_ua = translator.translate_to_ukrainian(article.full_text, article.language)

        if not title_ua:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫: {article.title}")
            return None
    else:
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç ({article.language})")
        title_ua = article.title
        description_ua = article.description
        full_text_ua = article.full_text

    # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–Ω–æ–ø—Å–∏—Å—É (—è–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if USE_SUMMARIZATION:
        text_for_summary = full_text_ua or description_ua or ""
        summary_ua = summarizer.create_summary_from_parts(
            title_ua, description_ua, text_for_summary
        )

        if not summary_ua:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏–Ω–æ–ø—Å–∏—Å –¥–ª—è: {title_ua}")
            summary_ua = description_ua or "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        else:
            logger.info("‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    else:
        logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ–ø–∏—Å (—Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ)")
        summary_ua = description_ua or "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    
    return {
        'title': title_ua,
        'summary': summary_ua,
        'full_text': full_text_ua or description_ua,
        'url': article.url,
        'source': article.source,
        'original_language': article.language
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–∞–π–ø–ª–∞–π–Ω—É"""
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ telegram-news-ua-ch MVP")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
    logger.info(f"   - GPT –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è: {'‚úÖ –í–≤—ñ–º–∫–Ω–µ–Ω–æ' if USE_GPT_CLASSIFICATION else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
    logger.info(f"   - –ü–µ—Ä–µ–∫–ª–∞–¥: {'‚úÖ –í–≤—ñ–º–∫–Ω–µ–Ω–æ' if USE_TRANSLATION else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
    logger.info(f"   - –†–µ–∑—é–º—É–≤–∞–Ω–Ω—è: {'‚úÖ –í–≤—ñ–º–∫–Ω–µ–Ω–æ' if USE_SUMMARIZATION else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = load_environment_variables()
        logger.info("‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        parser = NewsParser()
        translator = Translator(config['openai_api_key'])
        summarizer = Summarizer(config['openai_api_key'])
        telegram_client = TelegramClient(
            config['telegram_token'], 
            config['telegram_channel']
        )
        
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not telegram_client.test_connection():
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram")
        
        # –ö–†–û–ö 1: –ü–∞—Ä—Å–∏–Ω–≥ RSS-—Å—Ç—Ä—ñ—á–æ–∫
        logger.info("üì° –ü–∞—Ä—Å–∏–Ω–≥ RSS-—Å—Ç—Ä—ñ—á–æ–∫...")
        ukraine_articles = parser.parse_all_feeds()
        
        if not ukraine_articles:
            logger.info("üì≠ –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(ukraine_articles)} —Å—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É")
        
        # –ö–†–û–ö 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        logger.info("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É...")
        articles_with_text = parser.get_articles_with_full_text(ukraine_articles)
        
        # –ö–†–û–ö 3-5: –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–µ–π (–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è ‚Üí –ø–µ—Ä–µ–∫–ª–∞–¥ ‚Üí —Ä–µ–∑—é–º–µ)
        logger.info("üîÑ –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–µ–π...")
        processed_articles = []
        
        for article in articles_with_text:
            try:
                processed_data = process_article(article, translator, summarizer)
                if processed_data:
                    processed_articles.append(processed_data)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—Ç—ñ {article.title}: {e}")
        
        if not processed_articles:
            logger.info("üì≠ –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏")
            return
        
        logger.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {len(processed_articles)} —Å—Ç–∞—Ç–µ–π")
        
        # –ö–†–û–ö 6: –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Telegram
        logger.info("üì± –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Telegram...")
        published_count = 0
        
        for article_data in processed_articles:
            try:
                message_id = telegram_client.send_message(
                    title=article_data['title'],
                    summary=article_data['summary'],
                    full_text=article_data['full_text'],
                    url=article_data['url'],
                    source=article_data['source']
                )
                
                if message_id:
                    published_count += 1
                    logger.info(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {article_data['title']} (ID: {message_id})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {article_data['title']}")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏
                import time
                time.sleep(3)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó {article_data['title']}: {e}")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        logger.info("üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É: {len(ukraine_articles)}")
        logger.info(f"   - –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {len(processed_articles)}")
        logger.info(f"   - –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Telegram: {published_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
