"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–∞—Ä—Å–µ—Ä–∞
"""

import os
import sys
from datetime import datetime, timedelta
import pytz

from rss_parser import SwissNewsParser, NewsArticle
from gpt_processor import GPTProcessor
from config import RSS_FEEDS, UKRAINE_KEYWORDS


def test_rss_parsing():
    """–¢–µ—Å—Ç—É—î –±–∞–∑–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥ RSS –±–µ–∑ GPT"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É RSS...")
    
    parser = SwissNewsParser()
    
    for source_name, feed_url in RSS_FEEDS.items():
        print(f"\nüì° –¢–µ—Å—Ç—É—î–º–æ {source_name}: {feed_url}")
        
        try:
            articles = parser.parse_rss_feed(feed_url, source_name)
            print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏")
            
            if articles:
                latest = articles[0]
                print(f"   üì∞ –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—è: {latest.title[:60]}...")
                print(f"   üïí –î–∞—Ç–∞: {latest.published_date}")
        
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


def test_ukraine_filtering():
    """–¢–µ—Å—Ç—É—î —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É"""
    print("\nüá∫üá¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ç–∞—Ç—Ç—ñ
    test_articles = [
        NewsArticle(
            title="Ukraine receives new military aid package",
            description="The latest aid package includes advanced weapons systems",
            link="https://example.com/1",
            source="test",
            published_date=datetime.now(pytz.UTC)
        ),
        NewsArticle(
            title="Swiss economy shows growth",
            description="GDP increased by 2.5% this quarter",
            link="https://example.com/2", 
            source="test",
            published_date=datetime.now(pytz.UTC)
        ),
        NewsArticle(
            title="–ó–µ–ª–µ–Ω—Å—å–∫–∏–π –≤—ñ–¥–≤—ñ–¥–∞–≤ –®–≤–µ–π—Ü–∞—Ä—ñ—é",
            description="–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –£–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ–≤—ñ–≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ –∑ —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏–º–∏ –ª—ñ–¥–µ—Ä–∞–º–∏",
            link="https://example.com/3",
            source="test", 
            published_date=datetime.now(pytz.UTC)
        )
    ]
    
    parser = SwissNewsParser()
    ukraine_articles = parser.filter_ukraine_related(test_articles)
    
    print(f"   üìä –ó {len(test_articles)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π, {len(ukraine_articles)} –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É")
    
    for article in ukraine_articles:
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {article.title}")


def test_gpt_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ GPT"""
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç GPT - –Ω–µ–º–∞—î API –∫–ª—é—á–∞")
        return
    
    print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ GPT...")
    
    try:
        gpt = GPTProcessor(api_key)
        
        # –¢–µ—Å—Ç –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        test_text = "Ukraine receives humanitarian aid from Switzerland"
        classification = gpt.classify_news(test_text)
        print(f"   üîç –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è '{test_text[:30]}...': {classification}")
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É
        test_translation = gpt.translate_to_ukrainian("Switzerland provides aid to Ukraine")
        if test_translation:
            print(f"   üåê –ü–µ—Ä–µ–∫–ª–∞–¥: {test_translation[:60]}...")
        
        # –¢–µ—Å—Ç —Ä–µ–∑—é–º–µ
        test_summary = gpt.create_summary("–®–≤–µ–π—Ü–∞—Ä—ñ—è –Ω–∞–¥–∞–ª–∞ –≥—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω—É –¥–æ–ø–æ–º–æ–≥—É –£–∫—Ä–∞—ó–Ω—ñ –≤ —Ä–æ–∑–º—ñ—Ä—ñ 50 –º—ñ–ª—å–π–æ–Ω—ñ–≤ —Ñ—Ä–∞–Ω–∫—ñ–≤")
        if test_summary:
            print(f"   üìù –†–µ–∑—é–º–µ: {test_summary[:60]}...")
            
        print("   ‚úÖ GPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ GPT: {e}")


def test_keyword_detection():
    """–¢–µ—Å—Ç—É—î –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤"""
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤...")
    
    test_texts = [
        "Ukraine war continues in eastern regions",
        "Ukrainer in der Schweiz finden Unterst√ºtzung", 
        "Les Ukrainiens re√ßoivent de l'aide humanitaire",
        "–ó–µ–ª–µ–Ω—Å—å–∫–∏–π –ø—Ä–æ–≤—ñ–≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏",
        "Swiss chocolate exports increase",
        "Kyiv mayor announces new initiatives"
    ]
    
    parser = SwissNewsParser()
    
    for text in test_texts:
        contains_keywords = parser._contains_ukraine_keywords(text)
        status = "‚úÖ" if contains_keywords else "‚ùå"
        print(f"   {status} '{text}' - {contains_keywords}")


def test_date_parsing():
    """–¢–µ—Å—Ç—É—î –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç"""
    print("\nüìÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç...")
    
    test_dates = [
        "Wed, 22 Jun 2025 10:30:00 GMT",
        "2025-06-22T10:30:00Z",
        "2025-06-22T10:30:00+02:00",
        "Jun 22, 2025 10:30 AM"
    ]
    
    parser = SwissNewsParser()
    
    for date_str in test_dates:
        try:
            parsed_date = parser._parse_date(date_str)
            is_recent = parser._is_recent(parsed_date) if parsed_date else False
            print(f"   ‚úÖ '{date_str}' -> {parsed_date} (recent: {is_recent})")
        except Exception as e:
            print(f"   ‚ùå '{date_str}' -> –ü–æ–º–∏–ª–∫–∞: {e}")


def main():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–ê–†–°–ï–†–ê –®–í–ï–ô–¶–ê–†–°–¨–ö–ò–• –ù–û–í–ò–ù")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏
    test_date_parsing()
    test_keyword_detection()
    test_ukraine_filtering()
    
    # –¢–µ—Å—Ç–∏ –∑ –º–µ—Ä–µ–∂–µ—é
    test_rss_parsing()
    
    # –¢–µ—Å—Ç–∏ GPT (—è–∫—â–æ —î API –∫–ª—é—á)
    test_gpt_integration()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
