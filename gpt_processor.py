"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OpenAI GPT-4
"""

import openai
from typing import Dict, Optional
import logging
from config import GPT_PROMPTS, OPENAI_MODEL, OPENAI_MAX_TOKENS, OPENAI_TEMPERATURE

logger = logging.getLogger(__name__)


class GPTProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT-4"""
    
    def __init__(self, api_key: str):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è GPT –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
        """
        openai.api_key = api_key
        self.client = openai.OpenAI(api_key=api_key)
    
    def _make_gpt_request(self, prompt: str) -> Optional[str]:
        """
        –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ GPT-4
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É
            
        Returns:
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        try:
            response = self.client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=OPENAI_TEMPERATURE
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ GPT: {e}")
            return None
    
    def classify_news(self, text: str) -> str:
        """
        –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É —è–∫ –ø–æ–≤'—è–∑–∞–Ω—É –∑ –£–∫—Ä–∞—ó–Ω–æ—é –∞–±–æ –Ω—ñ
        
        Args:
            text: –¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏
            
        Returns:
            "Ukraine-related" –∞–±–æ "Not related"
        """
        prompt = GPT_PROMPTS['classification'].format(text=text)
        result = self._make_gpt_request(prompt)
        
        if result and "Ukraine-related" in result:
            return "Ukraine-related"
        return "Not related"
    
    def translate_to_ukrainian(self, text: str) -> Optional[str]:
        """
        –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        
        Args:
            text: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        prompt = GPT_PROMPTS['translation'].format(original_text=text)
        return self._make_gpt_request(prompt)
    
    def create_summary(self, translated_text: str) -> Optional[str]:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–æ–≤–∏–Ω–∏
        
        Args:
            translated_text: –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏
            
        Returns:
            –°–∏–Ω–æ–ø—Å–∏—Å –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        prompt = GPT_PROMPTS['summary'].format(translated_text=translated_text)
        return self._make_gpt_request(prompt)
    
    def generate_telegram_post(self, title: str, summary: str, 
                             full_text: str, source_url: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä—É—î Telegram-–ø–æ—Å—Ç
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            summary: –°–∏–Ω–æ–ø—Å–∏—Å
            full_text: –ü–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
            source_url: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            
        Returns:
            –ì–æ—Ç–æ–≤–∏–π Telegram-–ø–æ—Å—Ç –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑–∞ —à–∞–±–ª–æ–Ω–æ–º
        telegram_post = f"""üì¢ *{title}*

{summary}

---
*–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:*
{full_text}

[–û—Ä–∏–≥—ñ–Ω–∞–ª —Ç—É—Ç]({source_url})"""
        
        return telegram_post
