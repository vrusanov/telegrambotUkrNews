"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω –∑ Google Sheets
–ß–∏—Ç–∞—î —Å—Ö–≤–∞–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î —ó—Ö –≤ Telegram –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
"""

import os
import logging
from typing import List, Dict
from datetime import datetime

from google_sheets_integration import GoogleSheetsManager
from dalle_image_generator import DALLEImageGenerator
from telegram_bot_advanced import TelegramBotAdvanced

logger = logging.getLogger(__name__)


class ApprovedNewsPublisher:
    """–ö–ª–∞—Å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω"""
    
    def __init__(self, config: Dict[str, str]):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ç–æ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ API –∫–ª—é—á–∞–º–∏ —Ç–∞ —à–ª—è—Ö–∞–º–∏
        """
        self.config = config
        self.sheets_manager = None
        self.image_generator = None
        self.telegram_bot = None
        
        self._initialize_components()
    
    def _initialize_components(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"""
        try:
            # Google Sheets
            credentials_path = self.config.get('google_credentials_path')
            spreadsheet_id = self.config.get('google_spreadsheet_id')
            
            if credentials_path and spreadsheet_id and os.path.exists(credentials_path):
                self.sheets_manager = GoogleSheetsManager(credentials_path, spreadsheet_id)
                logger.info("Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            else:
                raise ValueError("Google Sheets –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            
            # DALL-E (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            openai_key = self.config.get('openai_api_key')
            if openai_key:
                images_dir = self.config.get('images_dir', 'images')
                self.image_generator = DALLEImageGenerator(openai_key, images_dir)
                logger.info("DALL-E –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            
            # Telegram
            bot_token = self.config.get('telegram_bot_token')
            chat_id = self.config.get('telegram_chat_id')
            
            if bot_token and chat_id:
                self.telegram_bot = TelegramBotAdvanced(bot_token, chat_id)
                logger.info("Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            else:
                raise ValueError("Telegram –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            raise
    
    def get_approved_articles(self) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º—É—î —Å—Ö–≤–∞–ª–µ–Ω—ñ, –∞–ª–µ –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
        """
        if not self.sheets_manager:
            logger.error("Google Sheets –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return []
        
        try:
            articles = self.sheets_manager.get_unpublished_approved_articles()
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π")
            return articles
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π: {e}")
            return []
    
    def generate_image_if_needed(self, article: Dict, row_number: int) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        
        Args:
            article: –î–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
            row_number: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
            
        Returns:
            –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ None
        """
        if not self.image_generator:
            logger.info("DALL-E –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_generated = article.get('Image_Generated', '').lower()
        if image_generated in ['yes', '—Ç–∞–∫', 'y', '1']:
            logger.info("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ")
            return None
        
        summary = article.get('Summary', '')
        if not summary:
            logger.warning("–ù–µ–º–∞—î —Å–∏–Ω–æ–ø—Å–∏—Å—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return None
        
        try:
            logger.info("–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            title_safe = article.get('Title', 'article').replace(' ', '_')[:20]
            filename = f"{title_safe}_{timestamp}.png"
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_path = self.image_generator.generate_and_save_image(summary, filename)
            
            if image_path:
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
                self.sheets_manager.update_image_status(row_number, "Yes")
                logger.info(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {image_path}")
                return image_path
            else:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                return None
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            return None
    
    def create_telegram_post(self, article: Dict) -> str:
        """
        –°—Ç–≤–æ—Ä—é—î Telegram –ø–æ—Å—Ç –∑ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç—Ç—ñ
        
        Args:
            article: –î–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –∑ Google Sheets
            
        Returns:
            –ì–æ—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        """
        title = article.get('Title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        summary = article.get('Summary', '')
        full_text = article.get('FullText', '')
        link = article.get('Link', '')
        source = article.get('Source', '')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç
        post = f"üì¢ *{title}*\n\n"
        
        if summary:
            post += f"{summary}\n\n"
        
        if full_text and full_text != summary:
            post += "---\n*–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:*\n"
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
            if len(full_text) > 1000:
                post += f"{full_text[:997]}...\n\n"
            else:
                post += f"{full_text}\n\n"
        
        if link:
            post += f"[–ß–∏—Ç–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª]({link})\n\n"
        
        if source:
            post += f"–î–∂–µ—Ä–µ–ª–æ: {source}"
        
        return post
    
    def publish_article(self, article: Dict, row_number: int) -> bool:
        """
        –ü—É–±–ª—ñ–∫—É—î –æ–¥–Ω—É —Å—Ç–∞—Ç—Ç—é
        
        Args:
            article: –î–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
            row_number: –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞ –≤ Google Sheets
            
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
        """
        try:
            title = article.get('Title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            logger.info(f"–ü—É–±–ª—ñ–∫—É—î–º–æ —Å—Ç–∞—Ç—Ç—é: {title}")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            image_path = self.generate_image_if_needed(article, row_number)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É
            post_text = self.create_telegram_post(article)
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ Telegram
            result = self.telegram_bot.send_post_with_image(post_text, image_path)
            
            if result.get("ok"):
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Google Sheets
                self.sheets_manager.mark_as_published(row_number)
                logger.info(f"–°—Ç–∞—Ç—Ç—è —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞: {title}")
                return True
            else:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é: {result.get('description')}")
                return False
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–∞—Ç—Ç—ñ: {e}")
            return False
    
    def publish_all_approved(self, max_articles: int = 10) -> Dict[str, int]:
        """
        –ü—É–±–ª—ñ–∫—É—î –≤—Å—ñ —Å—Ö–≤–∞–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        
        Args:
            max_articles: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
        """
        results = {
            'total_found': 0,
            'published': 0,
            'failed': 0,
            'skipped': 0
        }
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ö–≤–∞–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
            approved_articles = self.get_approved_articles()
            results['total_found'] = len(approved_articles)
            
            if not approved_articles:
                logger.info("–ù–µ–º–∞—î —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
                return results
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π
            articles_to_publish = approved_articles[:max_articles]
            if len(approved_articles) > max_articles:
                results['skipped'] = len(approved_articles) - max_articles
                logger.info(f"–û–±–º–µ–∂—É—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –¥–æ {max_articles} —Å—Ç–∞—Ç–µ–π")
            
            # –¢–µ—Å—Ç—É—î–º–æ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è
            if not self.telegram_bot.test_connection():
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram")
                results['failed'] = len(articles_to_publish)
                return results
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ
            for i, article in enumerate(articles_to_publish):
                try:
                    # –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞ –≤ Google Sheets (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 2, –±–æ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                    row_number = i + 2  # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä
                    
                    if self.publish_article(article, row_number):
                        results['published'] += 1
                    else:
                        results['failed'] += 1
                    
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏
                    import time
                    time.sleep(3)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–∞—Ç—Ç—ñ {i+1}: {e}")
                    results['failed'] += 1
            
            logger.info(f"–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('publish_approved.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    logger.info("–ó–∞–ø—É—Å–∫ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω")
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config = {
        'openai_api_key': os.getenv('OPENAI_API_KEY'),
        'google_credentials_path': os.getenv('GOOGLE_CREDENTIALS_PATH', 'credentials.json'),
        'google_spreadsheet_id': os.getenv('GOOGLE_SPREADSHEET_ID'),
        'telegram_bot_token': os.getenv('TELEGRAM_BOT_TOKEN'),
        'telegram_chat_id': os.getenv('TELEGRAM_CHAT_ID'),
        'images_dir': os.getenv('IMAGES_DIR', 'images')
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    required_params = ['google_spreadsheet_id', 'telegram_bot_token', 'telegram_chat_id']
    missing_params = [param for param in required_params if not config.get(param)]
    
    if missing_params:
        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {missing_params}")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ç–æ—Ä
        publisher = ApprovedNewsPublisher(config)
        
        # –ü—É–±–ª—ñ–∫—É—î–º–æ —Å—Ö–≤–∞–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        results = publisher.publish_all_approved(max_articles=5)
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á")
        print("="*50)
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π: {results['total_found']}")
        print(f"–£—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {results['published']}")
        print(f"–ü–æ–º–∏–ª–∫–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {results['failed']}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–ª—ñ–º—ñ—Ç): {results['skipped']}")
        print("="*50)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()
