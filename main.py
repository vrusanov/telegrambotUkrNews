"""
–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏—Ö –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É
"""

import os
import logging
from datetime import datetime
import json
from typing import Optional

from rss_parser import SwissNewsParser, NewsArticle
from config import RSS_FEEDS

# –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
try:
    from telegram_integration import send_news_to_telegram
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

try:
    from google_sheets_integration import save_articles_to_sheets
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False

try:
    from news_workflow_manager import NewsWorkflowManager, create_workflow_config
    WORKFLOW_MANAGER_AVAILABLE = True
except ImportError:
    WORKFLOW_MANAGER_AVAILABLE = False


def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('swiss_news.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )


def save_results_to_file(results: dict, filename: str = None):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–∞–π–ª"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"swiss_news_results_{timestamp}.json"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–±'—î–∫—Ç–∏ NewsArticle –≤ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è JSON
    json_results = {
        'timestamp': datetime.now().isoformat(),
        'total_articles': len(results['all_articles']),
        'ukraine_articles_count': len(results['ukraine_articles']),
        'processed_articles_count': len(results['processed_articles']),
        'all_articles': [],
        'ukraine_articles': [],
        'processed_articles': []
    }
    
    for category in ['all_articles', 'ukraine_articles', 'processed_articles']:
        for article in results[category]:
            article_dict = {
                'title': article.title,
                'description': article.description,
                'link': article.link,
                'source': article.source,
                'published_date': article.published_date.isoformat() if article.published_date else None,
                'is_ukraine_related': article.is_ukraine_related,
                'translated_title': article.translated_title,
                'translated_text': article.translated_text,
                'summary': article.summary,
                'telegram_post': article.telegram_post
            }
            json_results[category].append(article_dict)
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(json_results, f, ensure_ascii=False, indent=2)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")


def print_ukraine_articles(articles: list):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—Ç—ñ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if not articles:
        print("–°—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    print(f"\n{'='*80}")
    print(f"–ó–ù–ê–ô–î–ï–ù–û {len(articles)} –°–¢–ê–¢–ï–ô –ü–†–û –£–ö–†–ê–á–ù–£")
    print(f"{'='*80}")
    
    for i, article in enumerate(articles, 1):
        print(f"\n{i}. {article.source.upper()}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.title}")
        if article.translated_title:
            print(f"–ü–µ—Ä–µ–∫–ª–∞–¥: {article.translated_title}")
        print(f"–û–ø–∏—Å: {article.description[:200]}...")
        print(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {article.link}")
        print(f"–î–∞—Ç–∞: {article.published_date}")
        
        if article.summary:
            print(f"–†–µ–∑—é–º–µ: {article.summary}")
        
        if article.telegram_post:
            print(f"\nTelegram-–ø–æ—Å—Ç:")
            print("-" * 50)
            print(article.telegram_post)
            print("-" * 50)
        
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    setup_logging()
    logger = logging.getLogger(__name__)

    print("üá®üá≠ –ü–∞—Ä—Å–µ—Ä —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏—Ö –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É")
    print("=" * 50)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    if WORKFLOW_MANAGER_AVAILABLE:
        print("üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π workflow –º–µ–Ω–µ–¥–∂–µ—Ä")
        run_advanced_workflow()
        return

    # Fallback –¥–æ –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    print("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º")

    # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á OpenAI –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if not openai_api_key:
        print("‚ö†Ô∏è  –£–í–ê–ì–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        print("–ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ GPT-–æ–±—Ä–æ–±–∫–∏.")
        print("–î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        print("export OPENAI_API_KEY='your-api-key-here'")
        print()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Å–µ—Ä
    parser = SwissNewsParser(openai_api_key)
    
    print("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ RSS-—Å—Ç—Ä—ñ—á–æ–∫...")
    print(f"–î–∂–µ—Ä–µ–ª–∞: {', '.join(RSS_FEEDS.keys())}")
    print()
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ –≤—Å—ñ —Å—Ç—Ä—ñ—á–∫–∏
        results = parser.parse_all_feeds(hours_back=24)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:")
        print(f"   –í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: {len(results['all_articles'])}")
        print(f"   –°—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É: {len(results['ukraine_articles'])}")
        print(f"   –û–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π: {len(results['processed_articles'])}")
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç—Ç—ñ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É
        print_ukraine_articles(results['ukraine_articles'])
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        save_results_to_file(results)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
        if GOOGLE_SHEETS_AVAILABLE and results['processed_articles']:
            print("\nüìä –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets...")
            sheets_success = save_articles_to_sheets(results['processed_articles'])
            if sheets_success:
                print("‚úÖ –°—Ç–∞—Ç—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Google Sheets –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ Google Sheets")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
        if TELEGRAM_AVAILABLE and results['processed_articles']:
            print("\nüì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
            telegram_success = send_news_to_telegram(results['processed_articles'])
            if telegram_success:
                print("‚úÖ –ù–æ–≤–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Telegram")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ Telegram (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)")

        # –í–∏–≤–æ–¥–∏–º–æ –≥–æ—Ç–æ–≤—ñ Telegram-–ø–æ—Å—Ç–∏
        processed_articles = results['processed_articles']
        if processed_articles:
            print(f"\n{'='*80}")
            print("–ì–û–¢–û–í–Ü TELEGRAM-–ü–û–°–¢–ò")
            print(f"{'='*80}")
            
            for i, article in enumerate(processed_articles, 1):
                if article.telegram_post:
                    print(f"\nüì± –ü–æ—Å—Ç #{i}:")
                    print("-" * 60)
                    print(article.telegram_post)
                    print("-" * 60)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


def run_advanced_workflow():
    """–ó–∞–ø—É—Å–∫–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π workflow –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        config = create_workflow_config()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not config.get('openai_api_key'):
            print("‚ö†Ô∏è  –£–í–ê–ì–ê: OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            print("–î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

        if not config.get('google_spreadsheet_id'):
            print("‚ö†Ô∏è  –£–í–ê–ì–ê: Google Sheets –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            print("–°—Ç–∞—Ç—Ç—ñ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")

        if not config.get('telegram_bot_token'):
            print("‚ö†Ô∏è  –£–í–ê–ì–ê: Telegram –±–æ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        print("\nüîç –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π workflow...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä workflow
        workflow_manager = NewsWorkflowManager(config)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó)
        results = workflow_manager.run_full_workflow(
            hours_back=24,
            generate_images=True,
            publish_immediately=False  # –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—è
        )

        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\n" + "="*60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –†–û–ó–®–ò–†–ï–ù–û–ì–û WORKFLOW")
        print("="*60)
        print(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {results.get('parsed_articles', 0)}")
        print(f"üá∫üá¶ –°—Ç–∞—Ç–µ–π –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É: {results.get('ukraine_articles', 0)}")
        print(f"ü§ñ –û–±—Ä–æ–±–ª–µ–Ω–æ GPT: {results.get('processed_articles', 0)}")
        print(f"üìä –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Sheets: {results.get('saved_to_sheets', 0)}")
        print(f"üñºÔ∏è  –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {results.get('generated_images', 0)}")
        print(f"üì± –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Telegram: {results.get('published_to_telegram', 0)}")

        if results.get('errors'):
            print(f"\n‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∏: {len(results['errors'])}")
            for error in results['errors']:
                print(f"   - {error}")

        print("="*60)

        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π
        if results.get('saved_to_sheets', 0) > 0:
            print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print("1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ Google Sheets –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∞—Ç–µ–π")
            print("2. –ó–º—ñ–Ω—ñ—Ç—å 'Approved' –Ω–∞ 'Yes' –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π")
            print("3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python publish_approved_news.py")
            print("4. –°—Ö–≤–∞–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –±—É–¥—É—Ç—å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –≤ Telegram –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ workflow: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
